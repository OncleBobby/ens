xgb_gblinear:
  class: models.xgboost_model.XgboostModel
  params:
    booster: gblinear
    tree_method: hist
    max_depth: 8 
    learning_rate: 0.025
    objective: "multi:softprob"
    num_class: 2
    eval_metric: mlogloss
xgb_gbtree:
  class: models.xgboost_model.XgboostModel
  params:
    booster: gbtree
    tree_method: hist
    max_depth: 8 
    learning_rate: 0.025
    objective: "multi:softprob"
    num_class: 2
    eval_metric: mlogloss
# xgb_dart:
#   class: models.xgboost_model.XgboostModel
#   params:
#     booster: dart
#     tree_method: hist
#     max_depth: 8 
#     learning_rate: 0.025
#     objective: "multi:softprob"
#     num_class: 2
#     eval_metric: mlogloss
xgb_classifier:
  class: models.xgboost_classifier_model.XgboostClassifierModel
  params:
    booster: gblinear
    tree_method: hist
    max_depth: 8 
    learning_rate: 0.025
    objective: "multi:softprob"
    num_class: 2
    eval_metric: mlogloss
catboost:
  class: models.catboost_model.CatBoostModel
  params:
    iterations: 1000
    devices: '0:1'
dummy:
  class: models.sklearn_model.SklearnModel
  params:
    class_name: sklearn.dummy.DummyClassifier
random_forest:
  class: models.sklearn_model.SklearnModel
  params:
    class_name: sklearn.ensemble.RandomForestClassifier
gradient_boosting:
  class: models.sklearn_model.SklearnModel
  params:
    class_name: sklearn.ensemble.GradientBoostingClassifier
ada_boost:
  class: models.sklearn_model.SklearnModel
  params:
    class_name: sklearn.ensemble.AdaBoostClassifier
# bagging:
#   class: models.sklearn_model.SklearnModel
#   params:
#     class_name: sklearn.ensemble.BaggingClassifier
extra_trees:
  class: models.sklearn_model.SklearnModel
  params:
    class_name: sklearn.ensemble.ExtraTreesClassifier
decision_tree:
  class: models.sklearn_model.SklearnModel
  params:
    class_name: sklearn.tree.DecisionTreeClassifier
hist_gradient_boosting:
  class: models.sklearn_model.SklearnModel
  params:
    class_name: sklearn.ensemble.HistGradientBoostingClassifier
mlp:
  class: models.sklearn_model.SklearnModel
  params:
    class_name: sklearn.neural_network.MLPClassifier
kneighbors:
  class: models.sklearn_model.SklearnModel
  params:
    class_name: sklearn.neighbors.KNeighborsClassifier
lightgbm:
  class: models.lightgbm_model.LightgbmModel
  params:
    learning_rate: 0.05
    max_depth: -5
    random_state: 42
    verbose: -1
    # num_leaves: 31
    # objective: multiclass
    # num_class: 3
    # metrics:
    #   - auc_mu
    #   - multi_logloss
    # learning_rate: 0.08
    # is_unbalance: True
    # max_bin: 255
    # metric_freq: 1
    # objective: binary
    # boosting_type: gbdt
    # num_leaves: 31
    # learning_rate: 0.05
    # feature_fraction: 0.9
    # learning_rate: 0.05
    # max_depth: -5
    # random_state: 42
    # eval_metric: mlogloss
    # objective: 'multiclass'
    # num_classes: 3
keras_relu_1:
  class: models.keras_model.KerasModel
  params:
    layers:
      - {'activation': 'relu', 'units': 10}
# sigmoid
# softmax
# softplus
# softsign
# selu
# tanh
# elu
# exponential
# leaky_relu
# silu
# gelu
# hard_sigmoid
# linear
# mish